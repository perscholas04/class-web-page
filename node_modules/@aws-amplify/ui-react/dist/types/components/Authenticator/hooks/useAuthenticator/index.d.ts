/// <reference types="amazon-cognito-identity-js" />
import * as React from 'react';
import { getServiceFacade, AuthInterpreter, AuthMachineState, AuthMachineSend } from '@aws-amplify/ui';
export declare type AuthenticatorContextValue = {
    service?: AuthInterpreter;
};
/**
 * AuthenticatorContext serves static reference to the auth machine service.
 *
 * https://xstate.js.org/docs/recipes/react.html#context-provider
 */
export declare const AuthenticatorContext: React.Context<AuthenticatorContextValue>;
export declare const Provider: ({ children }: {
    children: any;
}) => JSX.Element;
/**
 * These are the "facades" that we provide, which contains contexts respective
 * to current authenticator state.
 */
export declare type AuthenticatorContext = ReturnType<typeof getServiceFacade>;
/**
 * These are internal xstate helpers to we share with `useAuthenticator`.
 *
 * TODO(breaking?): remove these internal contexts
 */
export declare type InternalAuthenticatorContext = {
    _state: AuthMachineState;
    _send: AuthMachineSend;
};
/**
 * Inspired from https://xstate.js.org/docs/packages/xstate-react/#useselector-actor-selector-compare-getsnapshot.
 *
 * Selector accepts current facade values and returns an array of
 * desired value(s) that should trigger re-render.
 */
export declare type Selector = (context: AuthenticatorContext) => Array<any>;
export declare const useAuthenticator: (selector?: Selector) => {
    /** @deprecated For internal use only */
    _state: AuthMachineState;
    /** @deprecated For internal use only */
    _send: (event: import("xstate").SCXML.Event<import("@aws-amplify/ui").AuthEvent> | import("xstate").SingleOrArray<import("xstate").Event<import("@aws-amplify/ui").AuthEvent>>, payload?: import("xstate").EventData) => import("xstate").State<import("@aws-amplify/ui").AuthContext, import("@aws-amplify/ui").AuthEvent, any, {
        value: any;
        context: import("@aws-amplify/ui").AuthContext;
    }, import("xstate").TypegenDisabled>;
    error: string;
    hasValidationErrors: boolean;
    isPending: boolean;
    route: string;
    user: import("@aws-amplify/ui").CognitoUserAmplify;
    validationErrors: {
        [x: string]: string | string[];
    };
    codeDeliveryDetails: import("amazon-cognito-identity-js").CodeDeliveryDetails;
    resendCode: (data?: import("@aws-amplify/ui").AuthEventData) => void;
    signOut: (data?: import("@aws-amplify/ui").AuthEventData) => void;
    submitForm: (data?: import("@aws-amplify/ui").AuthEventData) => void;
    updateForm: (data?: import("@aws-amplify/ui").AuthEventData) => void;
    updateBlur: (data?: import("@aws-amplify/ui").AuthEventData) => void;
    toFederatedSignIn: (data?: import("@aws-amplify/ui").AuthEventData) => void;
    toResetPassword: (data?: import("@aws-amplify/ui").AuthEventData) => void;
    toSignIn: (data?: import("@aws-amplify/ui").AuthEventData) => void;
    toSignUp: (data?: import("@aws-amplify/ui").AuthEventData) => void;
    skipVerification: (data?: import("@aws-amplify/ui").AuthEventData) => void;
};
