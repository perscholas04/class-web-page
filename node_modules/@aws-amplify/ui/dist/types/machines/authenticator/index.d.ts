import { AuthContext, AuthEvent } from '../../types';
export declare type AuthenticatorMachineOptions = AuthContext['config'] & {
    services?: AuthContext['services'];
};
export declare function createAuthenticatorMachine(): import("xstate").StateMachine<AuthContext, any, AuthEvent, {
    value: any;
    context: AuthContext;
}, import("xstate").BaseActionObject, import("xstate").ServiceMap, import("xstate").TypegenDisabled & {
    missingImplementations: {
        actions: never;
        delays: never;
        guards: never;
        services: never;
    };
} & {
    eventsCausingActions: Record<string, string>;
    eventsCausingDelays: Record<string, string>;
    eventsCausingGuards: Record<string, string>;
    eventsCausingServices: Record<string, string>;
} & {
    indexedActions: import("xstate").IndexByType<import("xstate").BaseActionObject>;
    indexedEvents: Record<string, AuthEvent> & {
        __XSTATE_ALLOW_ANY_INVOKE_DATA_HACK__: {
            data: any;
        };
    };
    invokeSrcNameMap: Record<string, "__XSTATE_ALLOW_ANY_INVOKE_DATA_HACK__">;
}>;
