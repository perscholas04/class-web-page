import { AuthEvent, SignInContext } from '../../../types';
import { defaultServices } from '../defaultServices';
export declare type SignInMachineOptions = {
    services?: Partial<typeof defaultServices>;
};
export declare function signInActor({ services }: SignInMachineOptions): import("xstate").StateMachine<SignInContext, any, AuthEvent, {
    value: any;
    context: SignInContext;
}, import("xstate").BaseActionObject, import("xstate").ServiceMap, import("xstate").TypegenDisabled & {
    missingImplementations: {
        actions: never;
        delays: never;
        guards: never;
        services: never;
    };
} & {
    eventsCausingActions: Record<string, string>;
    eventsCausingDelays: Record<string, string>;
    eventsCausingGuards: Record<string, string>;
    eventsCausingServices: Record<string, string>;
} & {
    indexedActions: import("xstate").IndexByType<import("xstate").BaseActionObject>;
    indexedEvents: Record<string, AuthEvent> & {
        __XSTATE_ALLOW_ANY_INVOKE_DATA_HACK__: {
            data: any;
        };
    };
    invokeSrcNameMap: Record<string, "__XSTATE_ALLOW_ANY_INVOKE_DATA_HACK__">;
}>;
